
#include "/Engine/Private/Common.ush"
#include "/Engine/Private/SceneTexturesCommon.ush"


float3 FogColor;
float MaxFogFactor;
float FogCurve;
float FogStart;
float BloomThreshold;
float BloomPower;
float BloomWidth;

Texture2D  BloomTexture;
SamplerState BloomSampler;

void MainVS(
	in float4 InPosition : ATTRIBUTE0,
	in float2 InTexCoord : ATTRIBUTE1,
	out noperspective float4 OutUVAndScreenPos : TEXCOORD0,
	out float4 OutPosition : SV_POSITION)
{
	DrawRectangle(InPosition, InTexCoord, OutPosition, OutUVAndScreenPos);
}

float4 MainPS(
	noperspective float4 UVAndScreenPos : TEXCOORD0
	) : SV_Target0
{
	float2 uv = UVAndScreenPos.xy;
    float4 res = CalcSceneColorAndDepth(uv);
	
    return saturate(float4(lerp(res.xyz, res.www*0.00001f, saturate(0.5f)), 1.f));
}


float4 PS_Otis_AFG_PerformBloom(noperspective float4 UVAndScreenPos : TEXCOORD0) : SV_Target0
{
	float4 color = CalcSceneColorAndDepth(UVAndScreenPos.xy);
	float3 BlurColor2 = 0;
	float3 Blurtemp = 0;
	float MaxDistance = 8*BloomWidth;
	float CurDistance = 0;
	float Samplecount = 25.0;
	float2 blurtempvalue = UVAndScreenPos.xy * View.ViewSizeAndInvSize.zw * BloomWidth;
	float2 BloomSample = float2(2.5,-2.5);
	float2 BloomSampleValue;
	
	for(BloomSample.x = (2.5); BloomSample.x > -2.0; BloomSample.x = BloomSample.x - 1.0)
	{
		BloomSampleValue.x = BloomSample.x * blurtempvalue.x;
		float2 distancetemp = BloomSample.x * BloomSample.x * BloomWidth;
		
		for(BloomSample.y = (- 2.5); BloomSample.y < 2.0; BloomSample.y = BloomSample.y + 1.0)
		{
			distancetemp.y = BloomSample.y * BloomSample.y;
			CurDistance = (distancetemp.y * BloomWidth) + distancetemp.x;
			BloomSampleValue.y = BloomSample.y * blurtempvalue.y;
			Blurtemp = CalcSceneColor(float2(UVAndScreenPos.xy + BloomSampleValue));
			BlurColor2.rgb += lerp(Blurtemp.rgb, color.rgb, sqrt(CurDistance / MaxDistance));
		}
	}
	BlurColor2.rgb = (BlurColor2.rgb / (Samplecount - (BloomPower - BloomThreshold*5)));
	float Bloomamount = (dot(color.rgb, float3(0.299f, 0.587f, 0.114f)));
	float3 BlurColor = BlurColor2.rgb * (BloomPower + 4.0);
	color.rgb = lerp(color.rgb, BlurColor.rgb, Bloomamount);	
	return saturate(color);
}

float4 PS_Otis_AFG_BlendFogWithNormalBuffer(noperspective float4 UVAndScreenPos : TEXCOORD0) : SV_Target0
{
	float4 color = CalcSceneColorAndDepth(UVAndScreenPos.xy);
	float depth = color.w;
	float fogFactor = clamp(saturate(depth - FogStart) * FogCurve, 0.0, MaxFogFactor); 
	return lerp(color, lerp(BloomTexture.Sample(BloomSampler, UVAndScreenPos.xy), float4(FogColor, 1.0), fogFactor), fogFactor);
}
