diff --git a/Shaders/Private/AdaptiveFogShader.usf b/Shaders/Private/AdaptiveFogShader.usf
index e363196..5aa46e7 100644
--- a/Shaders/Private/AdaptiveFogShader.usf
+++ b/Shaders/Private/AdaptiveFogShader.usf
@@ -12,6 +12,7 @@ float BloomPower;
 float BloomWidth;
 
 Texture2D  BloomTexture;
+SamplerState BloomSampler;
 
 void MainVS(
 	in float4 InPosition : ATTRIBUTE0,
@@ -33,7 +34,7 @@ float4 MainPS(
 }
 
 
-float4 PS_Otis_AFG_PerformBloom(noperspective float4 UVAndScreenPos : TEXCOORD0)
+float4 PS_Otis_AFG_PerformBloom(noperspective float4 UVAndScreenPos : TEXCOORD0) : SV_Target0
 {
 	float4 color = CalcSceneColorAndDepth(UVAndScreenPos.xy);
 	float3 BlurColor2 = 0;
@@ -55,7 +56,7 @@ float4 PS_Otis_AFG_PerformBloom(noperspective float4 UVAndScreenPos : TEXCOORD0)
 			distancetemp.y = BloomSample.y * BloomSample.y;
 			CurDistance = (distancetemp.y * BloomWidth) + distancetemp.x;
 			BloomSampleValue.y = BloomSample.y * blurtempvalue.y;
-			Blurtemp.rgb = tex2D(color.rgb, float2(UVAndScreenPos.xy + BloomSampleValue)).rgb;
+			Blurtemp = CalcSceneColor(float2(UVAndScreenPos.xy + BloomSampleValue));
 			BlurColor2.rgb += lerp(Blurtemp.rgb, color.rgb, sqrt(CurDistance / MaxDistance));
 		}
 	}
@@ -66,10 +67,10 @@ float4 PS_Otis_AFG_PerformBloom(noperspective float4 UVAndScreenPos : TEXCOORD0)
 	return saturate(color);
 }
 
-float4 PS_Otis_AFG_BlendFogWithNormalBuffer(noperspective float4 UVAndScreenPos : TEXCOORD0)
+float4 PS_Otis_AFG_BlendFogWithNormalBuffer(noperspective float4 UVAndScreenPos : TEXCOORD0) : SV_Target0
 {
 	float4 color = CalcSceneColorAndDepth(UVAndScreenPos.xy);
 	float depth = color.w;
 	float fogFactor = clamp(saturate(depth - FogStart) * FogCurve, 0.0, MaxFogFactor); 
-	return lerp(color, lerp(tex2D(Otis_BloomSampler, UVAndScreenPos.xy), float4(FogColor, 1.0), fogFactor), fogFactor);
+	return lerp(color, lerp(BloomTexture.Sample(BloomSampler, UVAndScreenPos.xy), float4(FogColor, 1.0), fogFactor), fogFactor);
 }
diff --git a/Source/AdaptiveFog/Private/AdaptiveFogSceneViewExtension.cpp b/Source/AdaptiveFog/Private/AdaptiveFogSceneViewExtension.cpp
index 8f9b490..73a4f40 100644
--- a/Source/AdaptiveFog/Private/AdaptiveFogSceneViewExtension.cpp
+++ b/Source/AdaptiveFog/Private/AdaptiveFogSceneViewExtension.cpp
@@ -103,6 +103,7 @@ void FAdaptiveFogSceneViewExtension::PrePostProcessPass_RenderThread(FRDGBuilder
 	ParametersFinal->FogCurve = CVarFogCurve->GetFloat();
 	ParametersFinal->FogStart = CVarFogStart->GetFloat();
 	ParametersFinal->BloomTexture = BloomTexture;
+	ParametersFinal->BloomSampler = TStaticSamplerState<SF_Point, AM_Clamp, AM_Clamp, AM_Clamp>::GetRHI();
 	ParametersFinal->RenderTargets[0] = ResultRenderTarget.GetRenderTargetBinding();
 
 
# diff --git a/Source/AdaptiveFog/Public/AdaptiveFogShaders.h b/Source/AdaptiveFog/Public/AdaptiveFogShaders.h
# index c7b6662..761a0f2 100644
# --- a/Source/AdaptiveFog/Public/AdaptiveFogShaders.h
# +++ b/Source/AdaptiveFog/Public/AdaptiveFogShaders.h
# @@ -42,5 +42,6 @@ class FAdaptiveFogPSFinal : public FGlobalShader
#  		SHADER_PARAMETER(float, MaxFogFactor)
#  		SHADER_PARAMETER(float, FogCurve)
#  		SHADER_PARAMETER(float, FogStart)
# +		SHADER_PARAMETER_SAMPLER(SamplerState, BloomSampler)
#  	END_SHADER_PARAMETER_STRUCT()
#  };
# \ No newline at end of file
